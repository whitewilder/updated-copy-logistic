import pandas as pd
import statsmodels.api as sm
from sklearn.datasets import load_iris

def backwardElimination(df, target_column, sl):
    """
    Perform backward elimination for logistic regression based on p-values.

    Parameters
    ----------
    df : pandas.DataFrame
        The dataset including features and target.
    target_column : str
        The name of the target variable column in the DataFrame.
    sl : float
        The significance level for p-values. Variables with p-values greater than this threshold are removed.

    Returns
    -------
    pandas.DataFrame
        The DataFrame containing only the features that remained after backward elimination.
    """
    # Extract target variable and features
    Y = df[target_column]
    X = df.drop(columns=[target_column])

    # Add constant to the model (intercept)
    X = sm.add_constant(X)

    # Perform backward elimination
    while True:
        try:
            regressor_OLS = sm.Logit(Y, X).fit()
        except sm.tools.sm_exceptions.PerfectSeparationError:
            # Handle perfect separation error
            print("Perfect separation detected; stopping backward elimination.")
            break

        pvalues = regressor_OLS.pvalues
        max_pvalue = pvalues.max()

        if max_pvalue > sl:
            # Remove the variable with the highest p-value
            worst_var = pvalues.idxmax()
            X = X.drop(columns=[worst_var])
        else:
            break

    # Drop constant column if needed
    if 'const' in X.columns:
        X = X.drop(columns=['const'])

    # Print summary of final model
    if not X.empty:
        print(regressor_OLS.summary())
    else:
        print("No variables remaining after backward elimination.")

    return X

# Load the Iris dataset
iris = load_iris()
iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
iris_df['species'] = iris.target

# Convert to binary classification: 'Iris-setosa' vs. others
iris_df['species'] = iris_df['species'].apply(lambda x: 1 if x == 0 else 0)

# Perform backward elimination
X_opt = backwardElimination(iris_df, target_column='species', sl=0.05)
print(X_opt.head())
